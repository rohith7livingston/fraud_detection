`backend/node_backend/app.js`

```javascript
const express = require("express");
const axios = require("axios");
const db = require("./server");  // MySQL connection
const cors = require("cors");

const app = express();
const PORT = 3000;

app.use(express.json());
app.use(cors());

app.post("/process-transaction", async (req, res) => {
    try {
        const transactionData = req.body;
        console.log("üì© Transaction Data Received:", transactionData);

        // Send to Python backend
        const pythonResponse = await axios.post("http://127.0.0.1:5000/predict", transactionData);
        console.log("üéØ Fraud Flag from Python:", pythonResponse.data);

        if (pythonResponse.data.fraud_flag !== undefined) {
            const fraudFlag = pythonResponse.data.fraud_flag;
            const explanation = pythonResponse.data.explanation || "No explanation available";
            const status = "pending"; // New column with default value "pending"

            transactionData.fraud_flag = fraudFlag;
            transactionData.explanation = explanation;
            transactionData.status = status; // Add status to transaction data

            // Store transaction and explanation in MySQL
            const query = `
                INSERT INTO transactions (timestamp, customer_id, amount, merchant, transaction_type, 
                    location_from, location_to, fraud_flag, customer_transaction_count, payment_method, 
                    merchant_risk_score, previous_location, hour_of_day, explanation, status)
                VALUES (NOW(), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`; // Added 'status' column

            const values = [
                transactionData.customer_id, transactionData.amount,
                transactionData.merchant, transactionData.transaction_type, transactionData.location_from,
                transactionData.location_to, fraudFlag, transactionData.customer_transaction_count,
                transactionData.payment_method, transactionData.merchant_risk_score,
                transactionData.previous_location, transactionData.hour_of_day, explanation, status // Added status
            ];

            db.query(query, values, (err, result) => {
                if (err) {
                    console.error("‚ùå Error inserting transaction:", err);
                    return res.status(500).json({ error: "Database error" });
                }
                res.json({ message: "‚úÖ Transaction processed successfully", fraud_flag: fraudFlag, status: status });
            });
        } else {
            res.status(500).json({ error: "No fraud flag returned from Python backend" });
        }
    } catch (error) {
        console.error("‚ùå Error processing transaction:", error.message);
        res.status(500).json({ error: "Transaction processing failed" });
    }
});

app.post("/status", async (req, res) => {
    const { transaction_id, new_status } = req.body;

    if (!transaction_id || !new_status) {
        return res.status(400).json({ error: "Transaction ID and new status are required" });
    }

    if (!["clean", "fraud"].includes(new_status)) {
        return res.status(400).json({ error: "Invalid status. Use 'clean' or 'fraud'" });
    }

    const query = "UPDATE transactions SET status = ? WHERE id = ?";

    db.query(query, [new_status, transaction_id], (err, result) => {
        if (err) {
            console.error("‚ùå Error updating transaction status:", err);
            return res.status(500).json({ error: "Database error" });
        }

        if (result.affectedRows === 0) {
            return res.status(404).json({ error: "Transaction not found" });
        }

        res.json({ message: `‚úÖ Transaction ${transaction_id} updated to ${new_status}` });
    });
});




app.get("/transactions", async (req, res) => {
    const query = "SELECT * FROM transactions ORDER BY timestamp DESC"; // Get all transactions (latest first)

    db.query(query, (err, result) => {
        if (err) {
            console.error("‚ùå Error fetching transactions:", err);
            return res.status(500).json({ error: "Database error" });
        }

        if (result.length === 0) {
            return res.status(404).json({ error: "No transactions found" });
        }

        res.json({ transactions: result });  // Return all transactions in the 'transactions' key
    });
});







app.get("/transaction/:id", async (req, res) => {
    const transactionId = req.params.id;

    if (!transactionId) {
        return res.status(400).json({ error: "Transaction ID is required" });
    }

    // Query to fetch the selected transaction
    const query1 = "SELECT * FROM transactions WHERE id = ?";
    
    db.query(query1, [transactionId], (err, result1) => {
        if (err) {
            console.error("‚ùå Error fetching transaction:", err);
            return res.status(500).json({ error: "Database error" });
        }

        if (result1.length === 0) {
            return res.status(404).json({ error: "Transaction not found" });
        }

        const transaction = result1[0];
        const customerId = transaction.customer_id;

        // Query to fetch all previous transactions of the same customer
        const query2 = "SELECT * FROM transactions WHERE customer_id = ? AND id < ? ORDER BY timestamp DESC";

        db.query(query2, [customerId, transactionId], (err, result2) => {
            if (err) {
                console.error("‚ùå Error fetching previous transactions:", err);
                return res.status(500).json({ error: "Database error" });
            }

            res.json({
                selected_transaction: transaction,
                previous_transactions: result2
            });
        });
    });
});


app.listen(PORT, () => {
  console.log(`üöÄ Node.js server running on port ${PORT}`);
});

module.exports = { app };























// const express = require("express");
// const axios = require("axios");
// const db = require("./server");  // MySQL connection
// const cors = require("cors");
// const { OpenAI } = require("openai");

// const app = express();
// const PORT = 3000;

// app.use(express.json());
// app.use(cors());

// // Initialize OpenAI client
// const openai = new OpenAI({
//   apiKey: "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"  // Replace with your OpenAI API key
// });

// async function generateHumanReadableExplanation(rawExplanation) {
//     try {
//         // Construct the prompt to generate the explanation
//         const prompt = `Below is a raw explanation of a fraud detection prediction. Convert this into a human-readable, easy-to-understand explanation:\n${rawExplanation}`;

//         // Call the OpenAI API to generate the human-readable explanation
//         const response = await openai.chat.completions.create({
//             model: "gpt-3.5-turbo",  // You can use "gpt-4" as well if required
//             messages: [
//                 { role: "system", content: "You are a helpful assistant." },
//                 { role: "user", content: prompt }
//             ],
//             max_tokens: 200,
//             temperature: 0.7
//         });

//         return response.choices[0].message.content.trim();
//     } catch (error) {
//         console.error("Error generating explanation with OpenAI:", error);
//         throw new Error("Failed to generate explanation");
//     }
// }

// app.post("/process-transaction", async (req, res) => {
//     try {
//         const transactionData = req.body;
//         console.log("üì© Transaction Data Received:", transactionData);

//         // Send to Python backend
//         const pythonResponse = await axios.post("http://127.0.0.1:5000/predict", transactionData);
//         console.log("üéØ Fraud Flag from Python:", pythonResponse.data);

//         if (pythonResponse.data.fraud_flag !== undefined) {
//             const fraudFlag = pythonResponse.data.fraud_flag;
//             const rawExplanation = pythonResponse.data.explanation || "No explanation available";

//             // Generate human-readable explanation using OpenAI API
//             const humanReadableExplanation = await generateHumanReadableExplanation(rawExplanation);

//             transactionData.fraud_flag = fraudFlag;
//             transactionData.explanation = humanReadableExplanation;

//             // Store transaction and explanation in MySQL
//             const query = `
//                 INSERT INTO transactions (timestamp, customer_id, amount, merchant, transaction_type, 
//                     location_from, location_to, fraud_flag, customer_transaction_count, payment_method, 
//                     merchant_risk_score, previous_location, hour_of_day, explanation)
//                 VALUES (NOW(), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
//             `;

//             const values = [
//                 transactionData.customer_id, transactionData.amount,
//                 transactionData.merchant, transactionData.transaction_type, transactionData.location_from,
//                 transactionData.location_to, fraudFlag, transactionData.customer_transaction_count,
//                 transactionData.payment_method, transactionData.merchant_risk_score,
//                 transactionData.previous_location, transactionData.hour_of_day, humanReadableExplanation
//             ];

//             db.query(query, values, (err, result) => {
//                 if (err) {
//                     console.error("‚ùå Error inserting transaction:", err);
//                     return res.status(500).json({ error: "Database error" });
//                 }
//                 res.json({ message: "‚úÖ Transaction processed successfully", fraud_flag: fraudFlag, explanation: humanReadableExplanation });
//             });
//         } else {
//             res.status(500).json({ error: "No fraud flag returned from Python backend" });
//         }
//     } catch (error) {
//         console.error("‚ùå Error processing transaction:", error.message);
//         res.status(500).json({ error: "Transaction processing failed" });
//     }
// });

// app.listen(PORT, () => {
//   console.log(`üöÄ Node.js server running on port ${PORT}`);
// });

// module.exports = { app };

```

`backend/node_backend/controllers/transaction.js`

```javascript

```

`backend/node_backend/server.js`

```javascript
const mysql = require("mysql2");

// Create the MySQL database connection
const db = mysql.createConnection({
  host: "localhost",
  user: "root",  // Database username
  password: "rohith#SQL",  // Database password (ensure this is secure in production)
  database: "fraud_detection",
});

// Connect to MySQL database with error handling
db.connect((err) => {
  if (err) {
    console.error("‚ùå Database connection failed:", err.message);
    process.exit(1);  // Exit the process if database connection fails
  } else {
    console.log("‚úÖ Connected to MySQL database.");
  }
});

// Export the connection for use in other parts of the app
module.exports = db;

```

`backend/python_backend/app.py`

```python
from flask import Flask, request, jsonify
import joblib
import pandas as pd
import lime.lime_tabular
import numpy as np
import os

app = Flask(__name__)

# Load model and encoders
model = joblib.load('model/fraud_detection_model.pkl')
label_encoders = joblib.load('model/label_encoders.pkl')

@app.route('/predict', methods=['POST'])
def predict():
    try:
        # Get request data
        data = request.json
        print("üì© Received Data:", data)

        # Expected features
        features = [
            "customer_id", "amount", "merchant", "transaction_type",
            "location_from", "location_to", "customer_transaction_count",
            "payment_method", "merchant_risk_score", "previous_location", "hour_of_day"
        ]

        # Convert input to DataFrame
        df = pd.DataFrame([data])

        # Convert numeric columns
        numeric_cols = ['amount', 'merchant_risk_score', 'customer_transaction_count', 'hour_of_day']
        df[numeric_cols] = df[numeric_cols].apply(pd.to_numeric, errors='coerce')

        # Encode categorical variables safely
        categorical_columns = ["customer_id", "merchant", "transaction_type", "location_from", "location_to", "payment_method", "previous_location"]
        for column in categorical_columns:
            if column in label_encoders:
                # If the category is not in the classes, we map it to a default value like -1
                df[column] = df[column].map(lambda x: label_encoders[column].transform([x])[0] if x in label_encoders[column].classes_ else -1)

        print("üìä Encoded DataFrame:", df)

        # Make prediction
        prediction = model.predict(df[features])[0]  # Ensure it's using the correct feature set
        print("üéØ Prediction:", prediction)

        # Explain the prediction using LIME
        explainer = lime.lime_tabular.LimeTabularExplainer(
            training_data=np.load('model/training_data.npy'),  # Ensure this file exists and has correct format
            feature_names=features,
            class_names=['Not Fraud', 'Fraud'],
            discretize_continuous=True
        )
        exp = explainer.explain_instance(df.iloc[0].values, model.predict_proba)
        explanation = exp.as_list()
        explanation_str = ' '.join([f"{feat}: {weight}" for feat, weight in explanation])

        print("üìù Explanation:", explanation_str)

        # Return response
        return jsonify({"fraud_flag": int(prediction), "explanation": explanation_str})

    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return jsonify({"error": str(e)})

if __name__ == '__main__':
    app.run(debug=True)

```

`backend/python_backend/requirements.txt`

```
flask
joblib
pandas
scikit-learn

```

`backend/python_backend/train_model.py`

```python
import pandas as pd
import joblib
import os
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from lime.lime_tabular import LimeTabularExplainer
import numpy as np

# Load dataset
data = pd.read_csv('transactions.csv')

# Define column names
data.columns = [
    'timestamp', 'customer_id', 'amount', 'merchant', 'transaction_type', 
    'location_from', 'location_to', 'fraud_flag', 'customer_transaction_count', 
    'payment_method', 'merchant_risk_score', 'previous_location', 'hour_of_day'
]

# Convert numerical columns
data[['amount', 'fraud_flag', 'customer_transaction_count', 'merchant_risk_score', 'hour_of_day']] = data[['amount', 'fraud_flag', 'customer_transaction_count', 'merchant_risk_score', 'hour_of_day']].apply(pd.to_numeric)

# Encode categorical variables
label_encoders = {}
categorical_columns = ['customer_id', 'merchant', 'transaction_type', 'location_from', 'location_to', 'payment_method', 'previous_location']

for column in categorical_columns:
    le = LabelEncoder()
    data[column] = le.fit_transform(data[column])
    label_encoders[column] = le  # Store the encoder

# Define features and target
X = data.drop(columns=['timestamp', 'fraud_flag'])
y = data['fraud_flag']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Save model, encoders, and training data
os.makedirs("model", exist_ok=True)
joblib.dump(model, 'model/fraud_detection_model.pkl')
joblib.dump(label_encoders, 'model/label_encoders.pkl')
np.save('model/training_data.npy', X_train.values)  # Store training data for LIME

print("‚úÖ Model and encoders saved successfully!")

```

`code.txt`

```

```

`frontend/postcss.config.js`

```javascript
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

```

`frontend/public/index.html`

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

```

`frontend/public/robots.txt`

```
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

```

`frontend/src/app/App.css`

```css
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

```

`frontend/src/app/App.js`

```javascript
import Home from "../pages/Home";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import TransactionDetails from "../pages/TransactionDetails";
import Transactions from "../pages/Transactions";
function App() {
  return (
      <Router>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/transaction/:id" element={<TransactionDetails />} />
        <Route path="/transactions" element={<Transactions/>} />
      </Routes>
    </Router>
  );
}

export default App;

```

`frontend/src/App.test.js`

```javascript
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

```

`frontend/src/components/NavBar.jsx`

```javascript
import { useState, useRef, useEffect } from "react";
import { FaTimes, FaFileAlt, FaUserShield, FaChartBar, FaSignOutAlt, FaCog } from "react-icons/fa";
import { Link, useNavigate } from "react-router-dom";
import axios from "axios";

function Navbar() {
  const [isOpen, setIsOpen] = useState(false);
  const [profileDropdown, setProfileDropdown] = useState(false);
  const [regno, setRegno] = useState("");
  const [userInfo, setUserInfo] = useState({});
  const [loggingOut, setLoggingOut] = useState(false);
  const navRef = useRef();
  const navigate = useNavigate();

  useEffect(() => {
    const storedUser = JSON.parse(localStorage.getItem("user"));
    if (storedUser?.regno) {
      setRegno(storedUser.regno);
    }
  }, []);

  useEffect(() => {
    const fetchUserInfo = async () => {
      if (!regno) return;
      try {
        const response = await axios.get(`http://localhost:3000/getUser/${regno}`);
        setUserInfo(response.data);
      } catch (error) {
        console.error("Error fetching user info:", error);
      }
    };
    fetchUserInfo();
  }, [regno]);

  const handleLogout = () => {
    setLoggingOut(true);
    setTimeout(() => {
      navigate("/login");
    }, 2000);
  };

  return (
    <header className="fixed top-0 left-0 w-full flex justify-between items-center h-16 px-6 bg-gradient-to-r from-red-500 to-pink-500 opacity-100 text-white shadow-lg z-50">
      <h1 className="text-2xl font-extrabold tracking-wider">Fraud Detection</h1>

      {/* Search Bar */}
      <div className="relative">
        <input type="text" placeholder="Search..." className="px-4 py-2 rounded-lg w-64 bg-white text-black" />
      </div>

      {/* Desktop Navigation */}
      <nav className="hidden md:flex gap-6 items-center">
        <Link to="/" className="hover:text-gray-300 transition">Home</Link>
        <Link to="/transactions" className="hover:text-gray-300 transition"><FaFileAlt className="inline mr-2" />Transactions</Link>
        <Link to="/review-team" className="hover:text-gray-300 transition"><FaUserShield className="inline mr-2" />Review Team</Link>
        <Link to="/reports" className="hover:text-gray-300 transition"><FaChartBar className="inline mr-2" />Reports</Link>
      </nav>

      {/* Profile Dropdown */}
      <div className="relative">
        <button onClick={() => setProfileDropdown(!profileDropdown)}>
          <img src={userInfo.avatar || "default-avatar.png"} alt="Profile" className="h-8 w-8 rounded-full" />
        </button>
        {profileDropdown && (
          <div className="absolute right-0 mt-2 w-48 bg-white text-black shadow-md rounded-lg">
            <div className="p-3 border-b border-gray-300">{userInfo.fullname}</div>
            <Link to="/settings" className="block px-4 py-2 hover:bg-gray-200"><FaCog className="inline mr-2" />Settings</Link>
            <button onClick={handleLogout} className="w-full text-left px-4 py-2 hover:bg-gray-200">
              <FaSignOutAlt className="inline mr-2" />Logout
            </button>
          </div>
        )}
      </div>

      {/* Mobile Navigation Button */}
      <button className="md:hidden text-2xl" onClick={() => setIsOpen(!isOpen)}>
        ‚ò∞
      </button>

      {/* Mobile Navigation Menu */}
      <nav className={`fixed top-0 left-0 w-full h-screen bg-gradient-to-r from-red-400 to-pink-400 bg-opacity-80 backdrop-blur-md flex flex-col items-center justify-center transition-transform duration-500 ${isOpen ? "translate-x-0" : "-translate-x-full"} z-40`}>
        <button className="absolute top-6 right-6 text-2xl" onClick={() => setIsOpen(false)}>
          <FaTimes />
        </button>
        <Link to="/" className="py-3" onClick={() => setIsOpen(false)}>Home</Link>
        <Link to="/transactions" className="py-3" onClick={() => setIsOpen(false)}>Transactions</Link>
        <Link to="/review-team" className="py-3" onClick={() => setIsOpen(false)}>Review Team</Link>
        <Link to="/reports" className="py-3" onClick={() => setIsOpen(false)}>Reports</Link>
        <button onClick={handleLogout} className="mt-6 py-3 flex items-center gap-2">
          <FaSignOutAlt /> Logout
        </button>
      </nav>

      {/* Logging Out Animation */}
      {loggingOut && (
        <div className="fixed inset-0 flex justify-center items-center bg-black bg-opacity-50 z-50">
          <div className="text-white text-2xl animate-pulse">Logging Out...</div>
        </div>
      )}
    </header>
  );
}

export default Navbar;

```

`frontend/src/index.css`

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

```

`frontend/src/index.js`

```javascript
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './app/App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

```

`frontend/src/pages/Home.jsx`

```javascript
import { useState, useEffect } from "react";
import {
  Card, CardContent, Table, TableHead, TableRow, TableCell, TableBody
} from "@mui/material";
import { useNavigate } from "react-router-dom";
import NavBar from "../components/NavBar";
import { Bar } from "react-chartjs-2";
import "chart.js/auto";

export default function Transactions() {
  const [transactions, setTransactions] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    fetch("http://localhost:3000/transactions")
      .then((res) => res.json())
      .then((data) => {
        const transformedData = data.transactions.map((tx) => ({
          id: tx.transaction_id,
          displayId: `T${tx.transaction_id}`,
          fraud_score: tx.fraud_score || Math.random() * 100,
          timestamp: tx.timestamp,
          amount: tx.amount,
          customer_id: tx.customer_id,
          transaction_type: tx.transaction_type,
          location_to: tx.location_to,
          status: tx.status || "Pending"
        }));
        setTransactions(transformedData);
      })
      .catch((err) => console.error("Error fetching transactions:", err));
  }, []);

  const handleRowClick = (transactionId) => {
    navigate(`/transaction/T${transactionId}`);
  };

  const chartData = {
    labels: transactions.map(tx => tx.displayId),
    datasets: [{
      label: "Transaction Amount",
      data: transactions.map(tx => tx.amount),
      backgroundColor: "rgba(255, 99, 132, 0.5)",
    }]
  };

  return (
    <div style={{ padding: "20px", backgroundColor: "#ffe9e9", minHeight: "100vh", fontSize: "0.92rem" }}>
      <NavBar />
      <div style={{ marginTop: "60px", display: "flex", gap: "20px", justifyContent: "center", flexWrap: "wrap" }}>
        <Card style={{ flex: "2.5", padding: "20px", backgroundColor: "white", borderRadius: "16px", boxShadow: "0px 4px 8px rgba(0,0,0,0.1)", margin: "10px" }}>
          <div style={{ display: "flex", alignItems: "center", justifyContent: "center", gap: "12px", marginBottom: "15px" }}>
            <div style={{ display: "flex", gap: "8px" }}>
              {["#ff0000", "#ffde59", "#7ed957"].map((color, index) => (
                <div
                  key={index}
                  style={{ width: "12px", height: "12px", borderRadius: "50%", backgroundColor: color }}
                />
              ))}
            </div>
            <h3 style={{ margin: 0 }}>Transactions are being processed...</h3>
          </div>

          <CardContent>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell style={{ backgroundColor: "#ffd6d6", fontWeight: "bold" }}>Time-Stamp</TableCell>
                  <TableCell style={{ backgroundColor: "#ffd6d6", fontWeight: "bold" }}>ID</TableCell>
                  <TableCell style={{ backgroundColor: "#ffd6d6", fontWeight: "bold" }}>Customer</TableCell>
                  <TableCell style={{ backgroundColor: "#ffd6d6", fontWeight: "bold" }}>Transaction Type</TableCell>
                  <TableCell style={{ backgroundColor: "#ffd6d6", fontWeight: "bold" }}>Amount</TableCell>
                  <TableCell style={{ backgroundColor: "#ffd6d6", fontWeight: "bold" }}>Location To</TableCell>
                  <TableCell style={{ backgroundColor: "#ffd6d6", fontWeight: "bold" }}>Status</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {transactions.map((tx) => (
                  <TableRow key={tx.id} onClick={() => handleRowClick(tx.id)} style={{ cursor: "pointer" }}>
                    <TableCell>{tx.timestamp}</TableCell>
                    <TableCell>{tx.displayId}</TableCell>
                    <TableCell>{tx.customer_id}</TableCell>
                    <TableCell>{tx.transaction_type}</TableCell>
                    <TableCell>{tx.amount}</TableCell>
                    <TableCell>{tx.location_to}</TableCell>
                    <TableCell style={{ backgroundColor: tx.status === "Flagged" ? "#ffcccc" : tx.status === "Under Review" ? "#fffacd" : tx.status === "Escalated" ? "#ff9999" : "#d9f7be", fontWeight: "bold", textAlign: "center", borderRadius: "8px", padding: "2px", height: "5px" }}>{tx.status}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>

        <Card style={{ flex: "1", padding: "20px", backgroundColor: "white", borderRadius: "16px", boxShadow: "0px 4px 8px rgba(0,0,0,0.1)", margin: "10px" }}>
          <CardContent>
            <h3>Transaction Summary</h3>
            <Bar data={chartData} />
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

```

`frontend/src/pages/TransactionDetails.jsx`

```javascript
import { useParams } from "react-router-dom";

export default function TransactionDetails() {
  const { id } = useParams();

  return (
    <div className="p-6 bg-gray-50 min-h-screen font-sans">
      <div className="flex justify-between items-center mb-4">
        <div>
          <p className="text-sm text-gray-500">Score</p>
          <p className="text-green-600 font-bold text-2xl">112</p>
        </div>
        <div className="flex gap-2">
          <button className="bg-red-500 text-white px-4 py-2 rounded">Fraud</button>
          <button className="bg-green-500 text-white px-4 py-2 rounded">Not Fraud</button>
          <button className="bg-blue-500 text-white px-4 py-2 rounded">Review Status</button>
        </div>
      </div>

      <div className="grid grid-cols-2 gap-6">
        {/* Whitebox Explanations */}
        <div className="bg-white rounded-xl shadow p-4">
          <h3 className="text-lg font-semibold mb-2">Whitebox Explanations</h3>
          <ul className="text-sm text-gray-700 space-y-1">
            <li>‚Ä¢ Risky US shipping address city</li>
            <li>‚Ä¢ Age of user account</li>
            <li>‚Ä¢ Number of numerical digits in the billing email</li>
            <li>‚Ä¢ Number of distinct device info and device ID over last 24h</li>
          </ul>
        </div>

        {/* Genome Graph Placeholder */}
        <div className="bg-white rounded-xl shadow p-4">
          <h3 className="text-lg font-semibold mb-2">Genome</h3>
          <div className="h-48 bg-gray-100 flex items-center justify-center text-gray-400">
            [Genome Graph Visualization]
          </div>
        </div>

        {/* Processing */}
        <div className="bg-white rounded-xl shadow p-4">
          <h3 className="text-lg font-semibold mb-2">Processing</h3>
          <p className="text-sm text-gray-700">Acquirer Response: <span className="text-green-600">Approved (Success)</span></p>
          <p className="text-sm text-gray-700">Raw Acquirer Response: N/A</p>
        </div>

        {/* Transaction Details */}
        <div className="bg-white rounded-xl shadow p-4">
          <h3 className="text-lg font-semibold mb-2">Transaction Details</h3>
          <p className="text-sm text-gray-700">Transaction ID: {id}</p>
          <p className="text-sm text-gray-700">Amount: ‚Ç¨325</p>
          <p className="text-sm text-gray-700">Currency: EUR</p>
          <p className="text-sm text-gray-700">Product Category: Premium</p>
        </div>

        {/* Payment Details */}
        <div className="bg-white rounded-xl shadow p-4 col-span-2">
          <h3 className="text-lg font-semibold mb-2">Payment Details</h3>
          <p className="text-sm text-gray-700">BIN Bank: Bank 1</p>
          <p className="text-sm text-gray-700">BIN Type: Credit</p>
          <p className="text-sm text-gray-700">3DS: Y</p>
          <p className="text-sm text-gray-700">CVV Response: Approved (Success)</p>
        </div>
      </div>
    </div>
  );
}

```

`frontend/src/pages/Transactions.jsx`

```javascript
import { useState, useEffect } from "react";
import { Card, CardContent, Table, TableHead, TableRow, TableCell, TableBody } from "@mui/material";
import { useNavigate } from "react-router-dom";
import NavBar from "../components/NavBar";
import ForceGraph3D from "react-force-graph-3d";
import { Bar } from "react-chartjs-2";
import "chart.js/auto";

export default function Transactions() {
  const [transactions, setTransactions] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    fetch("http://localhost:3000/transactions")
      .then((res) => res.json())
      .then((data) => {
        const transformedData = data.transactions.map((tx) => ({
          id: `T${tx.transaction_id}`,
          fraud_score: tx.fraud_score !== undefined ? tx.fraud_score : Math.random() * 100,
          timestamp: tx.timestamp,
          amount: tx.amount,
          customer_id: tx.customer_id,
          transaction_type: tx.transaction_type,
          location_from: tx.location_from,
          location_to: tx.location_to,
        }));
        setTransactions(transformedData);
      })
      .catch((err) => console.error("Error fetching transactions:", err));
  }, []);

  const handleRowClick = (transactionId) => {
    navigate(`/transaction/${transactionId}`);
  };

  const fraudData = transactions.filter((tx) => tx.fraud_score > 50);
  const fraudChartData = {
    labels: fraudData.map((tx) => tx.id),
    datasets: [
      {
        label: "Fraud Scores",
        data: fraudData.map((tx) => tx.fraud_score),
        backgroundColor: "rgba(255, 99, 132, 0.5)",
      },
    ],
  };

  const graphData = {
    nodes: transactions.map((tx) => ({ id: tx.id, fraud_score: tx.fraud_score })),
    links: transactions.map((tx, i) =>
      i > 0 ? { source: transactions[i - 1].id, target: tx.id } : null
    ).filter((link) => link !== null),
  };

  return (
    <div>
      <NavBar />
      <div style={{ marginTop: "100px", display: "flex", gap: "20px" }}>
        <Card style={{ flex: 1, padding: "20px" }}>
          <CardContent>
            <h3>Transaction History</h3>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Time-Stamp</TableCell>
                  <TableCell>ID</TableCell>
                  <TableCell>Customer</TableCell>
                  <TableCell>Transaction Type</TableCell>
                  <TableCell>Amount</TableCell>
                  <TableCell>Location From</TableCell>
                  <TableCell>Location To</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {transactions.map((tx) => (
                  <TableRow key={tx.id} onClick={() => handleRowClick(tx.id)} style={{ cursor: "pointer" }}>
                    <TableCell>{tx.timestamp}</TableCell>
                    <TableCell>{tx.id}</TableCell>
                    <TableCell>{tx.customer_id}</TableCell>
                    <TableCell>{tx.transaction_type}</TableCell>
                    <TableCell>{tx.amount}</TableCell>
                    <TableCell>{tx.location_from}</TableCell>
                    <TableCell>{tx.location_to}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
        <Card style={{ flex: 1, padding: "20px" }}>
          <CardContent>
            <h3>Transaction Network</h3>
            <ForceGraph3D graphData={graphData} />
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

```

`frontend/src/reportWebVitals.js`

```javascript
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

```

`frontend/src/setupTests.js`

```javascript
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

```

`frontend/tailwind.config.js`

```javascript
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};

```

